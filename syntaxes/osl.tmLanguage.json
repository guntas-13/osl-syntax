{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "osl",
  "scopeName": "source.osl",
  "patterns": [
    { "include": "#comment" },
    { "include": "#string" },
    { "include": "#number" },
    { "include": "#keyword" },
    { "include": "#operator" },
    { "include": "#punctuation" },
    { "include": "#identifier" },
    { "include": "#character" }
  ],
  "repository": {
    "comment": {
      "patterns": [
        {
          "name": "comment.line.double-slash.osl",
          "match": "//.*$"
        },
        {
          "name": "comment.block.osl",
          "begin": "/\\*",
          "beginCaptures": {
            "0": { "name": "punctuation.definition.comment.begin.osl" }
          },
          "end": "\\*/",
          "endCaptures": {
            "0": { "name": "punctuation.definition.comment.end.osl" }
          }
        }
      ]
    },
    "string": {
      "patterns": [
        {
          "name": "string.quoted.double.osl",
          "begin": "\"",
          "beginCaptures": {
            "0": { "name": "punctuation.definition.string.begin.osl" }
          },
          "end": "\"",
          "endCaptures": {
            "0": { "name": "punctuation.definition.string.end.osl" }
          }
        }
      ]
    },
    "character": {
      "patterns": [
        {
          "name": "constant.character.osl",
          "begin": "'",
          "beginCaptures": {
            "0": { "name": "punctuation.definition.character.begin.osl" }
          },
          "end": "'",
          "endCaptures": {
            "0": { "name": "punctuation.definition.character.end.osl" }
          },
          "patterns": [
            {
              "name": "constant.character.inner.osl",
              "match": "\\\\.|[^\\\\']"
            }
          ]
        }
      ]
    },
    "number": {
      "patterns": [
        {
          "name": "constant.numeric.hex.osl",
          "match": "\\b0[xX][0-9a-fA-F]+(?:\\.[0-9a-fA-F]+)?(?:[pP][+-]?[0-9]+)?\\b"
        },
        {
          "name": "constant.numeric.decimal.osl",
          "match": "\\b[0-9]+(?:\\.[0-9]+)?(?:[eE][+-]?[0-9]+)?\\b"
        },
        {
          "name": "constant.numeric.octal.osl",
          "match": "\\b0[oO][0-7]+(?:\\.[0-7]+)?(?:[eE][+-]?[0-9]+)?\\b"
        },
        {
          "name": "constant.numeric.binary.osl",
          "match": "\\b0[bB][01]+(?:\\.[01]+)?(?:[eE][+-]?[0-9]+)?\\b"
        }
      ]
    },
    "keyword": {
      "patterns": [
        {
          "name": "keyword.functionDeclaration.osl",
          "match": "def"
        },
        {
          "name": "keyword.variableDeclaration.osl",
          "match": "var"
        },
        {
          "name": "keyword.constantDeclaration.osl",
          "match": "const"
        },
        {
          "name": "keyword.return.osl",
          "match": "return"
        },
        {
          "name": "keyword.control.osl",
          "match": "\\b(?:if|elif|else)\\b"
        },
        {
          "name": "keyword.io.osl",
          "match": "\\b(?:log|print)\\b"
        },
        {
          "name": "keyword.loop.osl",
          "match": "\\b(?:while|for)\\b"
        },
        {
          "name": "storage.type.osl",
          "match": "\\b(?:bool|i8|i16|i32|i64|i128|u8|u16|u32|u64|u128|f8|f16|f32|f64|f128|c8|fn)\\b"
        },
        {
          "name": "keyword.bool.true.osl",
          "match": "true"
        },
        {
          "name": "keyword.bool.false.osl",
          "match": "false"
        },
        {
          "name": "keyword.null.osl",
          "match": "null"
        }
      ]
    },
    "operator": {
      "patterns": [
        {
          "name": "keyword.operator.assignment.osl",
          "match": ":="
        },
        {
          "name": "keyword.operator.functionReturnTemplate.osl",
          "match": "->"
        },
        {
          "name": "keyword.operator.LeftShift.osl",
          "match": "<<"
        },
        {
          "name": "keyword.operator.RightShift.osl",
          "match": ">>"
        },
        {
          "name": "keyword.operator.notEqual.osl",
          "match": "~="
        },
        {
          "name": "keyword.operator.lessThanEqualTo.osl",
          "match": "<="
        },
        {
          "name": "keyword.operator.greaterThanEqualTo.osl",
          "match": ">="
        },
        {
          "name": "keyword.operator.addition.osl",
          "match": "\\+"
        },
        {
          "name": "keyword.operator.negative.osl",
          "match": "\\-"
        },
        {
          "name": "keyword.operator.pointer.osl",
          "match": "#"
        },
        {
          "name": "keyword.operator.not.osl",
          "match": "~"
        },
        {
          "name": "keyword.operator.valAtDeRef.osl",
          "match": "@"
        },
        {
          "name": "keyword.operator.xand.osl",
          "match": "!&"
        },
        {
          "name": "keyword.operator.xor.osl",
          "match": "!\\|"
        },
        {
          "name": "keyword.operator.and.osl",
          "match": "&"
        },
        {
          "name": "keyword.operator.or.osl",
          "match": "\\|"
        },
        {
          "name": "keyword.operator.modulo.osl",
          "match": "%"
        },
        {
          "name": "keyword.operator.power.osl",
          "match": "\\^"
        },
        {
          "name": "keyword.operator.division.osl",
          "match": "/"
        },
        {
          "name": "keyword.operator.multiply.osl",
          "match": "\\*"
        },
        {
          "name": "keyword.operator.equal.osl",
          "match": "="
        },
        {
          "name": "keyword.operator.lessThan.osl",
          "match": "<"
        },
        {
          "name": "keyword.operator.greaterThan.osl",
          "match": ">"
        }
      ]
    },
    "punctuation": {
      "patterns": [
        {
          "name": "punctuation.separator.comma.osl",
          "match": ","
        },
        {
          "name": "punctuation.separator.semicolon.osl",
          "match": ";"
        },
        {
          "name": "punctuation.brackets.osl",
          "match": "[\\{\\}\\(\\)\\[\\]]"
        }
      ]
    },
    "identifier": {
      "patterns": [
        {
          "name": "variable.other.osl",
          "match": "\\b[_A-Za-z][_A-Za-z0-9]*\\b"
        }
      ]
    }
  }
}
